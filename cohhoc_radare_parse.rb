#Author: Nick Hoffman / securitykitten.github.io / @infoseckitten 
#Company: Morphick Inc. / @MorphickDefense
#Description: Using Radare2 + Ruby to parse the URL configuration from the cohhoc backdoor
#Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 3.0 License, and code samples are licensed under the Apache 2.0 License.

require 'r2pipe'
require 'json'
require 'base64'

def decode(config) 
	decode = Base64.decode64(config)
	uri = ""
	decode.each_byte do |b|
		#shr dl,6
		#shl al,2
		#or dl,al
		uri += (((b<<6)%0xff |(b>>2)%0xff)).chr
	end
	return uri
end

r2p = R2Pipe.new("#{ARGV[0]}")  #initialize the object
r2p.cmd('aaa')                  #analyze all functions
functions = r2p.cmd('aflj')     #return the function lists in JSON
func = JSON.parse(functions)    #parse the JSON
func.each do |elem|
	#disassemble each function and return JSON
	contents = JSON.parse(r2p.cmd("pdfj @ #{elem["offset"]}"))
	#iterate through the operations
	contents["ops"].each do |operations| 
		#is the operation a push?
		if operations["type"].eql?("push") 
			#look for addresses being pushed
			next unless operations["opcode"] =~ /\ 0x/
			#grab the value being pushed
			addr = operations["opcode"].split(" ").last.hex
			#use radare "psz" to grab the string
			str = r2p.cmd("psz @ #{addr}")
			#ugly regex looking for base64 data
			if str =~ /[0-9a-zA-Z\+\=]{10,}/
				#decode the string
				decoded_str = decode(str) 
				#is the decode something that looks like a URL?
				if decoded_str =~ /[0-9a-zA-Z\.\-]{5,}/
					puts "Function #{elem['name']} - #{str.chomp} - #{decoded_str}"
				end
			end
		end
	end
end
